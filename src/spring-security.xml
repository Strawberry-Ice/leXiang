<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-4.0.xsd">
	<http pattern="/login" security="none" />
	<http pattern="/doKaptcha" security="none" />
	<http pattern="/weichat*/**" security="none" />
	<http pattern="/assets/**" security="none" />
	<http pattern="/captchaController/image**" security="none" />
	<http pattern="/**/*.css" security="none" />
	<http pattern="/**/*.js" security="none" />
	<http pattern="/**/*.jpg" security="none" />
	<http pattern="/**/*.png" security="none" />
	<http pattern="/**/*.gif" security="none" />
	<http pattern="/**/*.swf" security="none" />
	<http auto-config="true">
		<intercept-url pattern="/**" access="isAuthenticated()" />
		<form-login login-page="/login" password-parameter="password" username-parameter="username" login-processing-url="/j_spring_security_check"
			authentication-failure-url="/login?error" default-target-url="/main" always-use-default-target="true"/>
		<logout logout-url="/j_spring_security_logout" />

		<!-- enable csrf protection -->
		<csrf disabled="true" />

		<!-- Spring Sercurity要从数据库中获取用户、权限、资源来实现权限管理，需要自定义过滤器， 并且该过滤器必须在spring 
			Security执行FILTER_SECURITY_INTERCEPTOR过滤器之前执行， 因为该框架实现权限管理实质就是在执行action之前先执行它框架中的为权限管理制定的一系列Fliter。 
			我们自定的这个SercurityFilter类要继承AbstractSecurityInterceptor 接口和Filter类（负责传递一系列的Filter）, 
			因为我们是从数据库中获取权限验证的数据，所以还要重写FilterInvocationSecurityMetadataSource 接口， AccessDecisionManager 
			接口，UserDetailsService 接口，只要重写了这3个接口， 然后再spring配置文件中做相应的配置，项目启动启动后，我们进行资源请求，就自动会去执行我们重定义的类进行权限判断。 -->
		<custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR" />

	</http>
	<authentication-manager alias="myAuthenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
			<password-encoder hash="md5">
				<salt-source user-property="username" />
			</password-encoder>
		</authentication-provider>
	</authentication-manager>

</beans:beans>